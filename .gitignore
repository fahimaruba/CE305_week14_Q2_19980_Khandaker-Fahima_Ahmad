def update_storage(data_dict, data_block):
    data_dict.update(data_block)
    return data_dict


def map_to_cache(cache_dict, memory_address, data_dict):
    tag_section, block_section, _ = memory_address[:7], memory_address[7:11], memory_address[11:]
    block_data = data_dict.get(memory_address[:11] + '000', None)

    if block_data is not None:
        cache_dict[block_section] = [tag_section, block_data, 1]

    return cache_dict


def check_cache_hit_or_miss(cache_dict, memory_address):
    tag_section, block_section, _ = memory_address[:7], memory_address[7:11], memory_address[11:]
    cache_line = cache_dict.get(block_section, None)

    if cache_line and cache_line[0] == tag_section and cache_line[2] == 1:
        return "Cache Hit"
    else:
        return "Cache Miss"


data_dict_state = {}
cache_dict_state = {f"{i:04b}": ["0000000", [0]*8, 0] for i in range(16)}

block_alpha = {"00001110101000": [10, 11, 12, 13, 14, 15, 16, 17]}  
block_beta = {"00000110101000": [0, 1, 2, 3, 4, 5, 6, 7]}  
block_gamma = {"00001110111000": [20, 21, 22, 23, 24, 25, 26, 27]}  

data_dict_state = update_storage(data_dict_state, block_alpha)
data_dict_state = update_storage(data_dict_state, block_beta)
data_dict_state = update_storage(data_dict_state, block_gamma)

location_kappa = "00001110101010"  
location_delta = "00000110101010"  
location_epsilon = "00001110111111"  

cache_dict_state = map_to_cache(cache_dict_state, location_kappa, data_dict_state)
cache_dict_state = map_to_cache(cache_dict_state, location_delta, data_dict_state)
cache_dict_state = map_to_cache(cache_dict_state, location_epsilon, data_dict_state)

result_alpha = check_cache_hit_or_miss(cache_dict_state, location_delta)
result_beta = check_cache_hit_or_miss(cache_dict_state, location_kappa)
result_gamma = check_cache_hit_or_miss(cache_dict_state, location_epsilon)

print("Cache Hit or Miss for location_delta (equivalent to address_1):", result_alpha)
print("Cache Hit or Miss for location_kappa (equivalent to address_2):", result_beta)
print("Cache Hit or Miss for location_epsilon (equivalent to address_3):", result_gamma)
